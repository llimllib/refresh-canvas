order: 7

code: |
  rightDown = false;
  leftDown = false;
  
  //set rightDown or leftDown if the right or left keys are down
  function onKeyDown(evt) {
    if (evt.keyCode == 39) rightDown = true;
    else if (evt.keyCode == 37) leftDown = true;
  }
  
  //and unset them when the right or left key is released
  function onKeyUp(evt) {
    if (evt.keyCode == 39) rightDown = false;
    else if (evt.keyCode == 37) leftDown = false;
  }
  
  $(document).keydown(onKeyDown);
  $(document).keyup(onKeyUp);
         
  function draw() {
    clear();
    circle(x, y, 10);
  
    //move the paddle if left or right is currently pressed
    if (rightDown) paddlex += 5;
    else if (leftDown) paddlex -= 5;
    rect(paddlex, HEIGHT-paddleh, paddlew, paddleh);
   
    if (x + dx &gt; WIDTH || x + dx &lt; 0)
      dx = -dx;
  
    if (y + dy &lt; 0)
      dy = -dy;
    else if (y + dy &gt; HEIGHT) {
      if (x &gt; paddlex &amp;&amp; x &lt; paddlex + paddlew)
        dy = -dy;
      else
        clearInterval(intervalId);
    }
   
    x += dx;
    y += dy;
  }
  
  init();

name: 'keyboard'

title: 'The Keyboard'

library: |
  var x = 150;
  var y = 150;
  var dx = 2;
  var dy = 4;
  var ctx;
  var WIDTH;
  var HEIGHT;
  var paddlex;
  var paddleh = 10;
  var paddlew = 75;
  var intervalId = 0;
  
  function circle(x,y,r) {
    ctx.beginPath();
    ctx.arc(x, y, r, 0, Math.PI*2, true);
    ctx.closePath();
    ctx.fill();
  }
  
  function rect(x,y,w,h) {
    ctx.beginPath();
    ctx.rect(x,y,w,h);
    ctx.closePath();
    ctx.fill();
  }
  
  function clear() {
    ctx.clearRect(0, 0, WIDTH, HEIGHT);
  }
  
  function init() {
    ctx = $('#canvas')[0].getContext("2d");
    WIDTH = $("#canvas").width()
    HEIGHT = $("#canvas").height()
    paddlex = WIDTH / 2;
    intervalId = setInterval(draw, 10);
    return intervalId;
  }

explain_before: |
  To add keyboard input to control our paddle, we need
    to do two things: find out when the left and right arrows have been
    pressed and move the paddle when they have.
    <p>In order to receive key events, we'll create one function called
    onKeyUp and another called onKeyDown, then use a bit of jQuery magic
    to bind them to the appropriate events.
    <p>Then, on our way through the draw function, we'll check to see if
    either arrow is pressed down, and move the paddle accordingly.
  

explain_after: |
  Now that we've got a working paddle, animation, and a bouncing ball,
          we've got something close to a game coming together.
      <p>On the next page, we'll move support for the keyboard into the
      library and add support for the mouse in a very similar manner.